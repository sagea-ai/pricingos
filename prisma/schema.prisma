generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        String                     @id @default(cuid())
  clerkId                   String                     @unique
  email                     String                     @unique
  firstName                 String?
  lastName                  String?
  imageUrl                  String?
  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime                   @default(now())
  hasCompletedOnboarding    Boolean                    @default(false)
  onboardingStep            Int                        @default(1)
  referralCode              String                     @unique @default(cuid())
  referredById              String?
  subscriptionTier          SubscriptionTier           @default(FREE)
  trialStartedAt            DateTime?
  trialEndsAt               DateTime?
  isTrialActive             Boolean                    @default(false)
  createdAnalyses           Analysis[]
  activities                Activity[]
  chatSessions              ChatSession[]
  credits                   Credit[]
  organizationMemberships   OrganizationMember[]
  createdOrganizations      Organization[]             @relation("OrganizationCreator")
  repositoryAccess          RepositoryAccess[]
  referredBy                User?                      @relation("UserReferrals", fields: [referredById], references: [id])
  referrals                 User[]                     @relation("UserReferrals")
  emailEvents               UserEmailEvent[]
  createdWorkspaces         Workspace[]                @relation("WorkspaceCreator")
  workspaceMemberships      WorkspaceMember[]
  workspaceActivities       WorkspaceActivity[]        @relation("WorkspaceActivityAuthor")
  workspaceActivityMentions WorkspaceActivityMention[] @relation("WorkspaceActivityMentions")
  notifications             UserNotification[]         @relation("UserNotifications")
  productProfiles           ProductProfile[]
  activeProductProfileId    String?
  activeProductProfile      ProductProfile? @relation("ActiveProductProfile", fields: [activeProductProfileId], references: [id])
  financialMetrics          FinancialMetrics[]
  gatewayConnections        GatewayConnection[]

  @@map("users")
}

model ProductProfile {
  id                  String              @id @default(cuid())
  productName         String
  coreValue           String              @db.Text
  features            String[]            @default([])
  market              String?
  currentPricingModel String?
  currentPrice        String?
  userType            String?             @default("Self-serve")
  churnRate           Float?
  monthlyRevenue      Float?
  totalUsers          Int?                @default(0)
  averagePrice        Float?
  businessStage       String?             @default("idea")
  isEstimate          Boolean             @default(true)
  paymentIntegrations String[]            @default([])
  userId              String
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @default(now())
  user                User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  competitors         ProductCompetitor[]
  PricingAnalysis     PricingAnalysis[]
  activeForUsers      User[]              @relation("ActiveProductProfile")
  financialMetrics    FinancialMetrics[]
  gatewayConnections  GatewayConnection[]

  @@map("product_profiles")
}

model FinancialMetrics {
  id                      String         @id @default(cuid())
  productProfileId        String
  userId                  String
  totalRevenue            Float          @default(0)
  monthlyRecurringRevenue Float          @default(0)
  oneTimePayments         Float          @default(0)
  averageRevenuePerUser   Float          @default(0)
  activeSubscriptions     Int            @default(0)
  revenueGrowthRate       Float          @default(0)
  mrrGrowthRate           Float          @default(0)
  subscriptionGrowthRate  Float          @default(0)
  totalExpenses           Float          @default(0)
  monthlyExpenses         Float          @default(0)
  currentCash             Float          @default(0)
  monthlyBurnRate         Float          @default(0)
  dailyBurnRate           Float          @default(0)
  dailyRevenue            Float          @default(0)
  netDailyBurn            Float          @default(0)
  runwayMonths            Float          @default(0)
  runwayDays              Int            @default(0)
  projectedCashDepletion  DateTime?
  calculatedAt            DateTime       @default(now())
  transactionCount        Int            @default(0)
  productProfile          ProductProfile @relation(fields: [productProfileId], references: [id], onDelete: Cascade)
  user                    User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("financial_metrics")
}

model GatewayConnection {
  id               String         @id @default(cuid())
  productProfileId String
  userId           String
  gateway          PaymentGateway
  isConnected      Boolean        @default(false)
  lastSync         DateTime?
  syncStatus       String?
  accountId        String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @default(now())
  productProfile   ProductProfile @relation(fields: [productProfileId], references: [id], onDelete: Cascade)
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([productProfileId, gateway])
  @@map("gateway_connections")
}

model Competitor {
  id                 String              @id @default(cuid())
  name               String
  website            String?
  description        String?
  pricingModel       String?
  startingPrice      String?
  features           String[]            @default([])
  market             String?
  fundingStage       String?
  targetSize         String?
  location           String?
  isActive           Boolean             @default(true)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @default(now())
  productComparisons ProductCompetitor[]

  @@map("competitors")
}

model ProductCompetitor {
  id                 String         @id @default(cuid())
  productProfileId   String
  competitorId       String
  isDirectCompetitor Boolean        @default(true)
  similarityScore    Float?
  notes              String?
  createdAt          DateTime       @default(now())
  productProfile     ProductProfile @relation(fields: [productProfileId], references: [id], onDelete: Cascade)
  competitor         Competitor     @relation(fields: [competitorId], references: [id], onDelete: Cascade)

  @@unique([productProfileId, competitorId])
  @@map("product_competitors")
}

model PricingAnalysis {
  id               String         @id @default(cuid())
  productProfileId String
  analysisType     String
  recommendations  Json
  insights         Json
  marketPosition   Json?
  competitorMatrix Json?
  abTestScenarios  Json?
  confidenceScore  Float?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @default(now())
  productProfile   ProductProfile @relation(fields: [productProfileId], references: [id], onDelete: Cascade)

  @@map("pricing_analyses")
}

model Organization {
  id                  String                @id @default(cuid())
  name                String
  website             String?
  companySize         CompanySize?
  industry            String?
  slug                String                @unique
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @default(now())
  creatorId           String
  githubInstallations GitHubInstallation[]
  integrations        Integration[]
  members             OrganizationMember[]
  settings            OrganizationSettings?
  creator             User                  @relation("OrganizationCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  repositories        Repository[]
  workspaces          Workspace[]
  triggerSettings     TriggerSetting[]

  @@map("organizations")
}

model OrganizationMember {
  id             String           @id @default(cuid())
  role           OrganizationRole @default(MEMBER)
  userId         String
  organizationId String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now())
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@map("organization_members")
}

model OrganizationSettings {
  id                   String       @id @default(cuid())
  organizationId       String       @unique
  emailNotifications   Boolean      @default(true)
  slackNotifications   Boolean      @default(false)
  discordNotifications Boolean      @default(false)
  autoAnalysis         Boolean      @default(true)
  analysisFrequency    String       @default("daily")
  analysisSettings     Json?
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @default(now())
  organization         Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("organization_settings")
}

model Repository {
  id                   String             @id @default(cuid())
  name                 String
  fullName             String             @unique
  githubId             String             @unique
  description          String?
  language             String?
  isPrivate            Boolean            @default(false)
  defaultBranch        String             @default("main")
  url                  String
  cloneUrl             String?
  sshUrl               String?
  starCount            Int?               @default(0)
  forkCount            Int?               @default(0)
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @default(now())
  organizationId       String
  githubInstallationId String?
  indexed              Boolean            @default(false)
  lastIndexedAt        DateTime?
  analysisResults      Analysis[]
  chatSessions         ChatSession[]
  analyses             CodeAnalysis[]
  fileIndexingJobs     FileIndexingJob[]
  issues               Issue[]
  organization         Organization       @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  access               RepositoryAccess[]
  stats                RepositoryStats?

  @@map("repositories")
}

model RepositoryAccess {
  id           String      @id @default(cuid())
  userId       String
  repositoryId String
  accessLevel  AccessLevel @default(READ)
  grantedAt    DateTime    @default(now())
  repository   Repository  @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, repositoryId])
  @@map("repository_access")
}

model Integration {
  id             String          @id @default(cuid())
  type           IntegrationType
  name           String
  settings       Json
  organizationId String
  isActive       Boolean         @default(true)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @default(now())
  organization   Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("integrations")
}

model CodeAnalysis {
  id           String         @id @default(cuid())
  branch       String         @default("main")
  commitSha    String
  status       AnalysisStatus @default(PENDING)
  startedAt    DateTime       @default(now())
  completedAt  DateTime?
  results      Json?
  repositoryId String
  repository   Repository     @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  issues       Issue[]

  @@map("code_analyses")
}

model Analysis {
  id                String           @id @default(cuid())
  name              String
  status            AnalysisStatus   @default(PENDING)
  type              AnalysisType     @default(CODEBASE)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @default(now())
  completedAt       DateTime?
  repositoryId      String
  userId            String
  workspaceId       String?
  prNumber          Int?
  branch            String?
  commit            String?
  options           Json
  fileIndexingJobId String?
  fileIndexingJob   FileIndexingJob? @relation(fields: [fileIndexingJobId], references: [id])
  repository        Repository       @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  createdBy         User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace         Workspace?       @relation("WorkspaceAnalyses", fields: [workspaceId], references: [id], onDelete: SetNull)
  results           AnalysisResult[]
}

model AnalysisResult {
  id          String        @id @default(cuid())
  analysisId  String
  type        IssueType
  severity    IssueSeverity
  title       String
  description String
  location    String?
  lineStart   Int?
  lineEnd     Int?
  code        String?
  suggestions String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now())
  status      IssueStatus   @default(OPEN)
  analysis    Analysis      @relation(fields: [analysisId], references: [id], onDelete: Cascade)
}

model FileIndexingJob {
  id           String     @id @default(cuid())
  repositoryId String
  status       JobStatus  @default(PENDING)
  progress     Float      @default(0)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now())
  completedAt  DateTime?
  error        String?
  analyses     Analysis[]
  repository   Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)

  @@map("file_indexing_jobs")
}

model Activity {
  id          String       @id @default(cuid())
  type        ActivityType
  title       String
  description String?
  metadata    Json?
  userId      String
  createdAt   DateTime     @default(now())
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("activities")
}

model Invitation {
  id               String           @id @default(cuid())
  email            String
  role             OrganizationRole @default(MEMBER)
  token            String           @unique
  organizationId   String
  organizationName String
  invitedById      String
  expiresAt        DateTime
  acceptedAt       DateTime?
  createdAt        DateTime         @default(now())

  @@map("invitations")
}

model GitHubInstallation {
  id             String        @id @default(cuid())
  installationId String        @unique
  accountId      String
  accountLogin   String
  accountType    String
  targetType     String
  permissions    Json
  events         Json
  suspendedAt    DateTime?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now())
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("github_installations")
}

model Credit {
  id          String     @id @default(cuid())
  amount      Float
  type        CreditType
  description String
  isActive    Boolean    @default(true)
  userId      String
  referralId  String?
  createdAt   DateTime   @default(now())
  expiresAt   DateTime?
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("credits")
}

model RepositoryStats {
  id           String     @id @default(cuid())
  repositoryId String     @unique
  totalFiles   Int        @default(0)
  totalLines   Int        @default(0)
  languages    Json?
  lastCommit   DateTime?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now())
  repository   Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)

  @@map("repository_stats")
}

model Issue {
  id             String        @id @default(cuid())
  title          String
  description    String
  status         IssueStatus   @default(OPEN)
  severity       IssueSeverity @default(MEDIUM)
  type           IssueType     @default(BUG)
  filePath       String?
  lineStart      Int?
  lineEnd        Int?
  repositoryId   String
  codeAnalysisId String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now())
  codeAnalysis   CodeAnalysis? @relation(fields: [codeAnalysisId], references: [id])
  repository     Repository    @relation(fields: [repositoryId], references: [id], onDelete: Cascade)

  @@map("issues")
}

model ChatSession {
  id           String        @id @default(cuid())
  title        String
  userId       String
  repositoryId String
  prNumber     Int?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now())
  messages     ChatMessage[]
  repository   Repository    @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("chat_sessions")
}

model ChatMessage {
  id        String      @id @default(cuid())
  sessionId String
  role      String
  content   String
  timestamp DateTime    @default(now())
  session   ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("chat_messages")
}

model UserEmailEvent {
  id     String         @id @default(cuid())
  userId String
  type   EmailEventType
  sentAt DateTime       @default(now())
  meta   Json?
  user   User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, type])
  @@map("user_email_events")
}

model Workspace {
  id          String  @id @default(cuid())
  name        String
  description String?
  slug        String  @unique
  icon        String  @default("📝")
  isPrivate   Boolean @default(false)
  prompt      String? @db.Text

  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  creatorId      String
  creator        User         @relation("WorkspaceCreator", fields: [creatorId], references: [id])

  members       WorkspaceMember[]
  analyses      Analysis[]            @relation("WorkspaceAnalyses")
  scenarios     Scenario[]
  activities    WorkspaceActivity[]
  notifications UserNotification[]    @relation("WorkspaceNotifications")
  invitations   WorkspaceInvitation[]

  @@map("workspaces")
}

model WorkspaceMember {
  id          String        @id @default(cuid())
  role        WorkspaceRole @default(MEMBER)
  userId      String
  workspaceId String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now())
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace   Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([userId, workspaceId])
  @@map("workspace_members")
}

model Scenario {
  id                String  @id @default(cuid())
  title             String
  type              String
  probability       Int
  timeframe         String
  description       String  @db.Text
  marketData        String? @db.Text
  verifiableFactors String? @db.Text
  backwardReasoning String? @db.Text

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map("scenarios")
}

model WorkspaceActivity {
  id          String   @id @default(cuid())
  type        String
  title       String
  description String?
  content     Json?
  metadata    Json?
  workspaceId String
  authorId    String
  parentId    String?
  level       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  workspace Workspace                  @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  author    User                       @relation("WorkspaceActivityAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  parent    WorkspaceActivity?         @relation("ActivityReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies   WorkspaceActivity[]        @relation("ActivityReplies")
  mentions  WorkspaceActivityMention[]

  @@map("workspace_activities")
}

model WorkspaceActivityMention {
  id                  String   @id @default(cuid())
  workspaceActivityId String
  userId              String
  createdAt           DateTime @default(now())

  workspaceActivity WorkspaceActivity @relation(fields: [workspaceActivityId], references: [id], onDelete: Cascade)
  user              User              @relation("WorkspaceActivityMentions", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([workspaceActivityId, userId])
  @@map("workspace_activity_mentions")
}

model UserNotification {
  id          String           @id @default(cuid())
  type        NotificationType
  title       String
  message     String
  isRead      Boolean          @default(false)
  userId      String
  workspaceId String?
  createdAt   DateTime         @default(now())

  user      User       @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)
  workspace Workspace? @relation("WorkspaceNotifications", fields: [workspaceId], references: [id], onDelete: SetNull)

  @@map("user_notifications")
}

model WorkspaceInvitation {
  id               String        @id @default(cuid())
  email            String
  role             WorkspaceRole @default(MEMBER)
  token            String        @unique
  workspaceId      String
  workspaceName    String
  organizationId   String
  organizationName String
  invitedById      String
  expiresAt        DateTime
  acceptedAt       DateTime?
  createdAt        DateTime      @default(now())

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@map("workspace_invitations")
}

model TriggerSetting {
  id             String          @id @default(cuid())
  triggerId      String
  name           String
  description    String
  category       TriggerCategory
  severity       TriggerSeverity
  isEnabled      Boolean         @default(false)
  emailTemplate  String?
  organizationId String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @default(now())
  organization   Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  emailLogs      TriggerEmailLog[]

  @@unique([triggerId, organizationId])
  @@map("trigger_settings")
}

model TriggerEmailLog {
  id                String         @id @default(cuid())
  triggerSettingId  String
  recipientEmail    String
  subject           String
  emailTemplate     String
  sentAt            DateTime       @default(now())
  status            String
  errorMessage      String?
  resendId          String?
  triggerSetting    TriggerSetting @relation(fields: [triggerSettingId], references: [id], onDelete: Cascade)

  @@map("trigger_email_logs")
}

model TriggerEventLog {
  id             String   @id @default(cuid())
  organizationId String
  triggerId      String
  triggerData    Json
  emailSent      Boolean  @default(false)
  recipients     String[] @default([])
  createdAt      DateTime @default(now())

  @@map("trigger_event_logs")
}

enum CompanySize {
  JUST_ME
  TWO_TO_TEN
  ELEVEN_TO_FIFTY
  FIFTY_ONE_TO_TWO_HUNDRED
  TWO_HUNDRED_PLUS
  THOUSAND_PLUS
}

enum OrganizationRole {
  OWNER
  ADMIN
  MEMBER
}

enum AccessLevel {
  READ
  WRITE
  ADMIN
}

enum IntegrationType {
  GITHUB
  GITLAB
  BITBUCKET
  SLACK
  DISCORD
  JIRA
  LINEAR
}

enum AnalysisStatus {
  PENDING
  PROCESSING
  RUNNING
  COMPLETED
  FAILED
}

enum AnalysisType {
  CODEBASE
  PULL_REQUEST
  BRANCH
  COMMIT
}

enum IssueType {
  BUG
  SECURITY
  PERFORMANCE
  CODE_QUALITY
  SUGGESTION
  VULNERABILITY
  CODE_SMELL
  ACCESSIBILITY
  BEST_PRACTICE
}

enum IssueSeverity {
  INFO
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum IssueStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  IGNORED
  DISMISSED
}

enum JobStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum ActivityType {
  REPOSITORY_CONNECTED
  ANALYSIS_COMPLETED
  ISSUE_FOUND
  ISSUE_RESOLVED
  MEMBER_INVITED
  INTEGRATION_ADDED
  ORGANIZATION_CREATED
  PRODUCT_PROFILE_CREATED
}

enum CreditType {
  REFERRAL_BONUS
  REFERRED_BONUS
  PROMOTIONAL
  MANUAL_ADJUSTMENT
}

enum SubscriptionTier {
  FREE
  PRO
  TRIAL
}

enum EmailEventType {
  WELCOME
  TRIAL_ENDING_SOON
  TRIAL_ENDED
  USAGE_LIMIT_APPROACHING
  USAGE_LIMIT_REACHED
  ORGANIZATION_INVITE
}

enum WorkspaceRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum NotificationType {
  WORKSPACE_MENTION
  WORKSPACE_REPLY
  WORKSPACE_ACTIVITY
  ANALYSIS_COMPLETE
  MEMBER_JOINED
}

enum PaymentGateway {
  STRIPE
  KHALTI
}

enum TriggerCategory {
  FINANCIAL
  USER
  SYSTEM
}

enum TriggerSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}